<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.pentaho.reporting</groupId>
    <artifactId>pentaho-reporting</artifactId>
    <version>7.1.0.32-242</version>
  </parent>
  <artifactId>reporting-assemblies</artifactId>
  <version>7.1.0.32-242</version>
  <packaging>pom</packaging>
  <name>Pentaho Reporting Assemblies</name>
  <properties>
    <stage.dir.designer>${stage.dir}/report-designer</stage.dir.designer>
    <stage.dir>${project.build.directory}/stage</stage.dir>
  </properties>
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-dependency-plugin</artifactId>
          <executions>
            <execution>
              <id>unpack-oss</id>
              <phase>generate-resources</phase>
              <goals>
                <goal>unpack</goal>
              </goals>
              <configuration>
                <artifactItems>
                  <artifactItem>
                    <groupId>pentaho</groupId>
                    <artifactId>oss-licenses</artifactId>
                    <type>zip</type>
                    <overWrite>true</overWrite>
                    <outputDirectory>${stage.dir.designer}</outputDirectory>
                    <includes>PentahoReporting_OSS_Licenses.html</includes>
                  </artifactItem>
                </artifactItems>
              </configuration>
            </execution>
            <execution>
              <id>unpack-karaf</id>
              <phase>generate-resources</phase>
              <goals>
                <goal>unpack</goal>
              </goals>
              <configuration>
                <artifactItems>
                  <artifactItem>
                    <groupId>pentaho</groupId>
                    <artifactId>pentaho-karaf-assembly</artifactId>
                    <type>zip</type>
                    <classifier>prd</classifier>
                    <overWrite>true</overWrite>
                    <outputDirectory>${stage.dir}</outputDirectory>
                  </artifactItem>
                </artifactItems>
              </configuration>
            </execution>
            <execution>
              <id>libs</id>
              <phase>process-resources</phase>
              <goals>
                <goal>copy-dependencies</goal>
              </goals>
              <configuration>
                <outputDirectory>${stage.dir.designer}/lib</outputDirectory>
                <includeTypes>jar</includeTypes>
                <includeScope>compile</includeScope>
                <excludeArtifactIds>derby,derbyclient,h2,jaybird,jt400,LucidDbClient-minimal,sapdbc,sqlite-jdbc,pdi-dataservice-client-plugin</excludeArtifactIds>
              </configuration>
            </execution>
            <execution>
              <id>drivers</id>
              <phase>process-resources</phase>
              <goals>
                <goal>copy-dependencies</goal>
              </goals>
              <configuration>
                <outputDirectory>${stage.dir.designer}/lib/jdbc</outputDirectory>
                <includeArtifactIds>derby,derbyclient,h2,hsqldb,infobright-core,jaybird,jt400,LucidDbClient-minimal,monetdb-jdbc,postgresql,sapdbc,sqlite-jdbc,pdi-dataservice-client-plugin</includeArtifactIds>
              </configuration>
            </execution>
            <execution>
              <id>unpack-plugins</id>
              <phase>generate-resources</phase>
              <goals>
                <goal>unpack-dependencies</goal>
              </goals>
              <configuration>
                <includeArtifactIds>pentaho-big-data-plugin,pentaho-cassandra-plugin,kettle-xml-plugin,kettle-json-plugin</includeArtifactIds>
                <outputDirectory>${stage.dir.designer}/plugins</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <executions>
            <execution>
              <id>copy-resources</id>
              <phase>process-resources</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${stage.dir.designer}</outputDirectory>
                <resources>
                  <resource>
                    <directory>${project.basedir}/src/main/resources/resource</directory>
                  </resource>
                </resources>
              </configuration>
            </execution>
            <execution>
              <id>copy-karaf</id>
              <phase>process-resources</phase>
              <goals>
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <outputDirectory>${stage.dir.designer}/system/karaf</outputDirectory>
                <resources>
                  <resource>
                    <directory>${stage.dir}/pentaho-karaf-assembly/</directory>
                  </resource>
                </resources>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
  <profiles>
    <profile>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <modules>
        <module>winlinux</module>
        <module>sample-war</module>
        <module>samples</module>
        <module>sdk</module>
      </modules>
    </profile>
    <profile>
      <id>mac</id>
      <activation>
        <property>
          <name>mac.jre.path</name>
        </property>
      </activation>
      <modules>
        <module>winlinux</module>
        <module>mac</module>
        <module>sample-war</module>
        <module>samples</module>
        <module>sdk</module>
      </modules>
    </profile>
  </profiles>
</project>
